// Code generated by protoc-gen-connect-gateway. DO NOT EDIT.
//
// Source: redpanda/api/dataplane/v1alpha1/secret.proto

package dataplanev1alpha1connect

import (
	context "context"
	fmt "fmt"

	runtime "github.com/grpc-ecosystem/grpc-gateway/v2/runtime"
	connect_gateway "go.vallahaye.net/connect-gateway"

	v1alpha1 "github.com/redpanda-data/console/backend/pkg/protogen/redpanda/api/dataplane/v1alpha1"
)

// SecretServiceGatewayServer implements the gRPC server API for the SecretService service.
type SecretServiceGatewayServer struct {
	v1alpha1.UnimplementedSecretServiceServer
	getSecret           connect_gateway.UnaryHandler[v1alpha1.GetSecretRequest, v1alpha1.GetSecretResponse]
	listSecrets         connect_gateway.UnaryHandler[v1alpha1.ListSecretsRequest, v1alpha1.ListSecretsResponse]
	createSecret        connect_gateway.UnaryHandler[v1alpha1.CreateSecretRequest, v1alpha1.CreateSecretResponse]
	updateSecret        connect_gateway.UnaryHandler[v1alpha1.UpdateSecretRequest, v1alpha1.UpdateSecretResponse]
	deleteSecret        connect_gateway.UnaryHandler[v1alpha1.DeleteSecretRequest, v1alpha1.DeleteSecretResponse]
	getConnectSecret    connect_gateway.UnaryHandler[v1alpha1.GetConnectSecretRequest, v1alpha1.GetConnectSecretResponse]
	listConnectSecrets  connect_gateway.UnaryHandler[v1alpha1.ListConnectSecretsRequest, v1alpha1.ListConnectSecretsResponse]
	createConnectSecret connect_gateway.UnaryHandler[v1alpha1.CreateConnectSecretRequest, v1alpha1.CreateConnectSecretResponse]
	updateConnectSecret connect_gateway.UnaryHandler[v1alpha1.UpdateConnectSecretRequest, v1alpha1.UpdateConnectSecretResponse]
	deleteConnectSecret connect_gateway.UnaryHandler[v1alpha1.DeleteConnectSecretRequest, v1alpha1.DeleteConnectSecretResponse]
}

// NewSecretServiceGatewayServer constructs a Connect-Gateway gRPC server for the SecretService
// service.
func NewSecretServiceGatewayServer(svc SecretServiceHandler, opts ...connect_gateway.HandlerOption) *SecretServiceGatewayServer {
	return &SecretServiceGatewayServer{
		getSecret:           connect_gateway.NewUnaryHandler(SecretServiceGetSecretProcedure, svc.GetSecret, opts...),
		listSecrets:         connect_gateway.NewUnaryHandler(SecretServiceListSecretsProcedure, svc.ListSecrets, opts...),
		createSecret:        connect_gateway.NewUnaryHandler(SecretServiceCreateSecretProcedure, svc.CreateSecret, opts...),
		updateSecret:        connect_gateway.NewUnaryHandler(SecretServiceUpdateSecretProcedure, svc.UpdateSecret, opts...),
		deleteSecret:        connect_gateway.NewUnaryHandler(SecretServiceDeleteSecretProcedure, svc.DeleteSecret, opts...),
		getConnectSecret:    connect_gateway.NewUnaryHandler(SecretServiceGetConnectSecretProcedure, svc.GetConnectSecret, opts...),
		listConnectSecrets:  connect_gateway.NewUnaryHandler(SecretServiceListConnectSecretsProcedure, svc.ListConnectSecrets, opts...),
		createConnectSecret: connect_gateway.NewUnaryHandler(SecretServiceCreateConnectSecretProcedure, svc.CreateConnectSecret, opts...),
		updateConnectSecret: connect_gateway.NewUnaryHandler(SecretServiceUpdateConnectSecretProcedure, svc.UpdateConnectSecret, opts...),
		deleteConnectSecret: connect_gateway.NewUnaryHandler(SecretServiceDeleteConnectSecretProcedure, svc.DeleteConnectSecret, opts...),
	}
}

func (s *SecretServiceGatewayServer) GetSecret(ctx context.Context, req *v1alpha1.GetSecretRequest) (*v1alpha1.GetSecretResponse, error) {
	return s.getSecret(ctx, req)
}

func (s *SecretServiceGatewayServer) ListSecrets(ctx context.Context, req *v1alpha1.ListSecretsRequest) (*v1alpha1.ListSecretsResponse, error) {
	return s.listSecrets(ctx, req)
}

func (s *SecretServiceGatewayServer) CreateSecret(ctx context.Context, req *v1alpha1.CreateSecretRequest) (*v1alpha1.CreateSecretResponse, error) {
	return s.createSecret(ctx, req)
}

func (s *SecretServiceGatewayServer) UpdateSecret(ctx context.Context, req *v1alpha1.UpdateSecretRequest) (*v1alpha1.UpdateSecretResponse, error) {
	return s.updateSecret(ctx, req)
}

func (s *SecretServiceGatewayServer) DeleteSecret(ctx context.Context, req *v1alpha1.DeleteSecretRequest) (*v1alpha1.DeleteSecretResponse, error) {
	return s.deleteSecret(ctx, req)
}

func (s *SecretServiceGatewayServer) GetConnectSecret(ctx context.Context, req *v1alpha1.GetConnectSecretRequest) (*v1alpha1.GetConnectSecretResponse, error) {
	return s.getConnectSecret(ctx, req)
}

func (s *SecretServiceGatewayServer) ListConnectSecrets(ctx context.Context, req *v1alpha1.ListConnectSecretsRequest) (*v1alpha1.ListConnectSecretsResponse, error) {
	return s.listConnectSecrets(ctx, req)
}

func (s *SecretServiceGatewayServer) CreateConnectSecret(ctx context.Context, req *v1alpha1.CreateConnectSecretRequest) (*v1alpha1.CreateConnectSecretResponse, error) {
	return s.createConnectSecret(ctx, req)
}

func (s *SecretServiceGatewayServer) UpdateConnectSecret(ctx context.Context, req *v1alpha1.UpdateConnectSecretRequest) (*v1alpha1.UpdateConnectSecretResponse, error) {
	return s.updateConnectSecret(ctx, req)
}

func (s *SecretServiceGatewayServer) DeleteConnectSecret(ctx context.Context, req *v1alpha1.DeleteConnectSecretRequest) (*v1alpha1.DeleteConnectSecretResponse, error) {
	return s.deleteConnectSecret(ctx, req)
}

// RegisterSecretServiceHandlerGatewayServer registers the Connect handlers for the SecretService
// "svc" to "mux".
func RegisterSecretServiceHandlerGatewayServer(mux *runtime.ServeMux, svc SecretServiceHandler, opts ...connect_gateway.HandlerOption) {
	if err := v1alpha1.RegisterSecretServiceHandlerServer(context.TODO(), mux, NewSecretServiceGatewayServer(svc, opts...)); err != nil {
		panic(fmt.Errorf("connect-gateway: %w", err))
	}
}
